
R version 4.2.1 (2022-06-23) -- "Funny-Looking Kid"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "Microbialdiversity"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('Microbialdiversity')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("calculate_inverse_simpson")
> ### * calculate_inverse_simpson
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: calculate_inverse_simpson
> ### Title: Calculate Inverse Simpson Diversity Index
> ### Aliases: calculate_inverse_simpson
> 
> ### ** Examples
> 
> # Example with equal abundances
> calculate_inverse_simpson(c(1, 1, 1, 1))  # Should return 4
[1] 4
> 
> # Example with unequal abundances
> calculate_inverse_simpson(c(10, 20, 30, 40))  # Should return ~3.57
[1] 3.333333
> 
> 
> 
> cleanEx()
> nameEx("calculate_observed_otus")
> ### * calculate_observed_otus
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: calculate_observed_otus
> ### Title: Calculate Observed OTUs
> ### Aliases: calculate_observed_otus
> 
> ### ** Examples
> 
> # Example with some zero abundances
> calculate_observed_otus(c(1, 0, 3, 0, 5))  # Should return 3
[1] 3
> 
> 
> 
> cleanEx()
> nameEx("calculate_shannon")
> ### * calculate_shannon
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: calculate_shannon
> ### Title: Calculate Shannon Diversity Index
> ### Aliases: calculate_shannon
> 
> ### ** Examples
> 
> # Example with equal abundances
> calculate_shannon(c(1, 1, 1, 1))  # Should return ~1.386
[1] 1.386294
> 
> # Example with unequal abundances
> calculate_shannon(c(10, 20, 30, 40))  # Should return ~1.279
[1] 1.279854
> 
> 
> 
> cleanEx()
> nameEx("calculate_simpson")
> ### * calculate_simpson
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: calculate_simpson
> ### Title: Calculate Simpson Diversity Index This function calculates the
> ###   Simpson diversity index (1-D) for a vector of species counts or
> ###   proportions. The Simpson index ranges from 0 (low diversity) to 1
> ###   (high diversity).
> ### Aliases: calculate_simpson
> 
> ### ** Examples
> 
> # Example with equal abundances
> calculate_simpson(c(1, 1, 1, 1))  # Should return 0.75
[1] 0.75
> 
> # Example with unequal abundances
> calculate_simpson(c(10, 20, 30, 40))  # Should return ~0.72
[1] 0.7
> 
> 
> 
> cleanEx()
> nameEx("compare_inverse_simpson_multiple")
> ### * compare_inverse_simpson_multiple
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: compare_inverse_simpson_multiple
> ### Title: Compare Inverse Simpson Diversity Between Multiple Groups
> ### Aliases: compare_inverse_simpson_multiple
> 
> ### ** Examples
> 
> communities <- matrix(c(10,20,30,40, 40,30,20,10, 25,25,25,25), 
+                      nrow=4, ncol=3)
> compare_inverse_simpson_multiple(communities)
      [,1]  [,2]  [,3]
[1,] 1.000 1.000 0.406
[2,] 1.000 1.000 0.377
[3,] 0.406 0.377 1.000
> 
> 
> 
> cleanEx()
> nameEx("compare_inverse_simpson_two")
> ### * compare_inverse_simpson_two
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: compare_inverse_simpson_two
> ### Title: Compare Inverse Simpson Diversity Between Two Groups
> ### Aliases: compare_inverse_simpson_two
> 
> ### ** Examples
> 
> sample1 <- c(10, 20, 30, 40)
> sample2 <- c(40, 30, 20, 10)
> compare_inverse_simpson_two(sample1, sample2)
$inverse_simpson_x
[1] 3.333333

$inverse_simpson_y
[1] 3.333333

$difference
[1] 0

$p_value
[1] 1

> 
> 
> 
> cleanEx()
> nameEx("compare_observed_otus_multiple")
> ### * compare_observed_otus_multiple
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: compare_observed_otus_multiple
> ### Title: Compare Observed OTUs Between Multiple Groups
> ### Aliases: compare_observed_otus_multiple
> 
> ### ** Examples
> 
> communities <- matrix(c(10,20,0,40, 40,30,20,0, 25,0,25,25), 
+                      nrow=4, ncol=3)
> compare_observed_otus_multiple(communities)
     [,1] [,2] [,3]
[1,]    1    1    1
[2,]    1    1    1
[3,]    1    1    1
> 
> 
> 
> cleanEx()
> nameEx("compare_observed_otus_two")
> ### * compare_observed_otus_two
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: compare_observed_otus_two
> ### Title: Compare Observed OTUs Between Two Groups
> ### Aliases: compare_observed_otus_two
> 
> ### ** Examples
> 
> sample1 <- c(10, 20, 30, 0, 40)
> sample2 <- c(40, 0, 30, 20, 10)
> compare_observed_otus_two(sample1, sample2)
$observed_otus_x
[1] 4

$observed_otus_y
[1] 4

$difference
[1] 0

$p_value
[1] 1

> 
> 
> 
> cleanEx()
> nameEx("compare_shannon_multiple")
> ### * compare_shannon_multiple
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: compare_shannon_multiple
> ### Title: Compare Shannon Diversity Between Multiple Groups
> ### Aliases: compare_shannon_multiple
> 
> ### ** Examples
> 
> communities <- matrix(c(10,20,30,40, 40,30,20,10, 25,25,25,25), 
+                      nrow=4, ncol=3)
> compare_shannon_multiple(communities)
$p.values
           H = 1.28  H = 1.28  H = 1.39
 H = 1.28        NA   0.50000   0.00698
 H = 1.28   0.50000        NA   0.00698
 H = 1.39   0.00698   0.00698        NA

> 
> 
> 
> cleanEx()

detaching ‘package:ecolTest’

> nameEx("compare_shannon_two")
> ### * compare_shannon_two
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: compare_shannon_two
> ### Title: Compare Shannon Diversity Between Two Groups
> ### Aliases: compare_shannon_two
> 
> ### ** Examples
> 
> sample1 <- c(10, 20, 30, 40)
> sample2 <- c(40, 30, 20, 10)
> compare_shannon_two(sample1, sample2)

	Hutcheson t-test for two communities

data:  x ,  y
Hutcheson t-statistic = 0, df = 200, p-value = 1
alternative hypothesis: true difference in H' is not equal to 0
sample estimates:
       x        y 
1.279854 1.279854 

> 
> 
> 
> cleanEx()

detaching ‘package:ecolTest’

> nameEx("compare_simpson_multiple")
> ### * compare_simpson_multiple
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: compare_simpson_multiple
> ### Title: Compare Simpson Diversity Between Multiple Groups
> ### Aliases: compare_simpson_multiple
> 
> ### ** Examples
> 
> communities <- matrix(c(10,20,30,40, 40,30,20,10, 25,25,25,25), 
+                      nrow=4, ncol=3)
> compare_simpson_multiple(communities)
      [,1]  [,2]  [,3]
[1,] 1.000 1.000 0.406
[2,] 1.000 1.000 0.377
[3,] 0.406 0.377 1.000
> 
> 
> 
> cleanEx()
> nameEx("compare_simpson_two")
> ### * compare_simpson_two
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: compare_simpson_two
> ### Title: Compare Simpson Diversity Between Two Groups
> ### Aliases: compare_simpson_two
> 
> ### ** Examples
> 
> sample1 <- c(10, 20, 30, 40)
> sample2 <- c(40, 30, 20, 10)
> compare_simpson_two(sample1, sample2)
$simpson_x
[1] 0.7

$simpson_y
[1] 0.7

$difference
[1] 0

$p_value
[1] 1

> 
> 
> 
> cleanEx()
> nameEx("microbiome_data")
> ### * microbiome_data
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: microbiome_data
> ### Title: Example Microbiome Dataset
> ### Aliases: microbiome_data
> ### Keywords: datasets
> 
> ### ** Examples
> 
> # Load the dataset
> data(microbiome_data)
> 
> # Calculate Shannon diversity for each sample
> shannon_values <- apply(microbiome_data$abundances, 2, calculate_shannon)
> 
> # Compare diversity between conditions
> control_samples <- microbiome_data$abundances[, 
+                   microbiome_data$metadata$condition == "Control"]
> treatment_samples <- microbiome_data$abundances[, 
+                     microbiome_data$metadata$condition == "Treatment"]
> diversity_comparison <- compare_shannon_two(control_samples, treatment_samples)
> 
> # View first few rows of abundance data
> head(microbiome_data$abundances)
       Sample_1 Sample_2 Sample_3 Sample_4 Sample_5 Sample_6 Sample_7 Sample_8
Taxa_1        5        4        4        5        5        3        5        4
Taxa_2        2        5        5        6        4        6        6        1
Taxa_3       11        4        3        8        3        3        5        8
Taxa_4        5        3        8       10        3        2        5        7
Taxa_5        2        4        9        7       11        8        3        2
       Sample_9 Sample_10
Taxa_1        6         7
Taxa_2        7         2
Taxa_3        3         2
Taxa_4        6         6
Taxa_5        3         4
> 
> # View sample metadata
> print(microbiome_data$metadata)
   sample_id condition
1   Sample_1   Control
2   Sample_2   Control
3   Sample_3   Control
4   Sample_4 Treatment
5   Sample_5 Treatment
6   Sample_6 Treatment
7   Sample_7   Control
8   Sample_8 Treatment
9   Sample_9 Treatment
10 Sample_10 Treatment
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()

detaching ‘package:ecolTest’

> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.248 0.016 0.268 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
