samp1 = as.matrix(samp)
View(samp1)
fit_adjust_batch <- adjust_batch(feature_abd = otus1,
batch = "Experiments",
covariates = "Groups",
data = samp1,
control = list(verbose = FALSE))
View(samp1)
# Plot the ordination, coloring and shaping points by 'Groups' and 'Experiments' respectively
graph_met.75 = plot_ordination(psnew, met_ord, color = "Groups", shape = "Experimemts")
# Add ellipses and points to the plot
y = graph_met.75 +
stat_ellipse(aes(group = Groups), type = "t", level = 0.95, linetype = 2) +  # Adds ellipses based on 'Groups'
geom_point(size = 5, alpha = 0.7)  # Adds points with specified size and transparency
# Print the plot
print(y)
fit_adjust_batch <- adjust_batch(feature_abd = otus1,
batch = "Experimemts",
covariates = "Groups",
data = samp1,
control = list(verbose = FALSE))
otus1_adj <- fit_adjust_batch$feature_abd_adj
####Calculate the distance of the unadjusted and adjusted Otu table
library(vegan, quietly = TRUE)
D_before <- vegdist(t(otus1), method = "bray")
D_after <- vegdist(t(otus1_adj), method = "bray")
#####Run a permanova to confirm the Bath effect adjustment
samp1 = as.data.frame(samp1)
set.seed(1)
fit_adonis_before <- adonis2(D_before ~Experiments , data = samp1)
fit_adonis_before <- adonis2(D_before ~Experimemts , data = samp1)
fit_adonis_before
fit_adonis_after <- adonis2(D_after ~ Experimemts, data = samp1)
fit_adonis_after
###############
Tax_alliss = (tax_table(psnew))
dim(Tax_alliss)
dim(otus1_adj)
ps_all_adj2 <- phyloseq(otu_table(otus1_adj, taxa_are_rows=TRUE),
tax_table(Tax_all))
row.names(samp1) = samp1$X.Sample_ID
sample_data(ps_all_adj2) = sample_data(samp1)
ps_all_adj2
ps_all_adj2 <- phyloseq(otu_table(otus1_adj, taxa_are_rows=TRUE),
tax_table(Tax_alliss))
row.names(samp1) = samp1$X.Sample_ID
sample_data(ps_all_adj2) = sample_data(samp1)
ps_all_adj2
all.reads = data.table(as(sample_data(ps_all_adj2), "data.frame"),
TotalReads = sample_sums(ps_all_adj2), keep.rownames = TRUE)
View(all.reads)
ps_all_adj_r2= rarefy_even_depth(ps_all_adj2, sample.size =18148, replace = FALSE)
data.frame = as(sample_data(ps_all_adj2), "data.frame")
plyr::count(data.frame, "Groups")
ps_all_adj_r2
#####################
# Ordinate using PCoA based on Bray-Curtis distance
met_ord1 = ordinate(ps_all_adj_r2, "PCoA", "bray")
# Plot the ordination, coloring and shaping points by 'Groups' and 'Experiments' respectively
graph_met.76 = plot_ordination(ps_all_adj_r2, met_ord1, color = "Groups", shape = "Experimemts")
# Add ellipses and points to the plot
y1 = graph_met.76 +
stat_ellipse(aes(group = Groups), type = "t", level = 0.95, linetype = 2)  +
geom_point(size = 5, alpha = 0.7)  # Adds points with specified size and transparency
# Print the plot
print(y1)
b<- plot_richness(ps_all_adj_r2, x = "Groups", measures = alpha_means, color = "Groups") +
geom_boxplot(width = 0.5, alpha = 0.5) +  # Adjust width and add transparency to the boxplot
geom_point(position = position_jitterdodge(), alpha = 0.5) +  # Add jittering to the points for better visibility
stat_compare_means() +
xlab("") +
ylab("Shannon Diversity") +  # Adding label for Shannon diversity on the y-axis
theme(axis.text.x = element_blank(),  # Remove y-axis label
strip.text = element_blank(),  # Remove facet labels
strip.background = element_blank())  # Remove facet background
b
###################
plotIndiv(ab.pca, group=treatments,
ind.names = F,legend=T,
pch = as.numeric(factor(study))+14,
pch.levels=(study), ellipse = TRUE,
title="PCA",legend.title = "Groups",
legend.title.pch = "Experiments", size.legend = rel(2.4),
size.legend.title = rel(2.5))
##Tuning the model
# tune the ncomp and keepX parameters for the MINT sPLS-DA model
ab.mint.splsda.tuning <- tune(method = "mint.splsda",
X = X.train,
Y = Y.train,
study = study.train,
ncomp = 5,
test.keepX = seq(5,50, 3),
measure = 'BER', # balanced error rate
dist = "centroids.dist")
plot(ab.mint.splsda.tuning, sd = FALSE)
############
plotIndiv(ab.mint.splsda, ind.names = F,legend=T,
pch = as.numeric(factor(study.train))+14,
pch.levels=study.train,
ellipse = T,
subtitle="sPLS-DA Sample Projection",legend.title = "Inhibitor",
legend.title.pch = "Experiment",
size.legend = rel(0.8))
################################
plotLoadings(ab.mint.splsda, method = "median", comp = 1,
legend = T, study = "global", contrib = "max",
title = "(a) All Studies, Comp 1")
plotLoadings(ab.mint.splsda, method = "median", comp = 2,
legend = T, study = "global", contrib = "max",
title = "(b) All Studies, Comp 2")
##############
ab.mint.splsda.perf <- perf(ab.mint.splsda, folds = 5, nrepeat = 10)
plot(ab.mint.splsda.perf)
#####################
# Ordinate using PCoA based on Bray-Curtis distance
met_ord1 = ordinate(ps_all_adj_r2, "PCoA", "bray")
# Plot the ordination, coloring and shaping points by 'Groups' and 'Experiments' respectively
graph_met.76 = plot_ordination(ps_all_adj_r2, met_ord1, color = "Groups", shape = "Experimemts")
# Add ellipses and points to the plot
y1 = graph_met.76 +
stat_ellipse(aes(group = Groups), type = "t", level = 0.95, linetype = 2)  +
geom_point(size = 5, alpha = 0.7)  # Adds points with specified size and transparency
# Print the plot
print(y1)
# Add ellipses and points to the plot
y = graph_met.75 +
stat_ellipse(aes(group = Groups), type = "t", level = 0.95, linetype = 2) +  # Adds ellipses based on 'Groups'
geom_point(size = 5, alpha = 0.7)  # Adds points with specified size and transparency
# Print the plot
print(y)
#####################
# Ordinate using PCoA based on Bray-Curtis distance
met_ord1 = ordinate(ps_all_adj_r2, "PCoA", "bray")
# Plot the ordination, coloring and shaping points by 'Groups' and 'Experiments' respectively
graph_met.76 = plot_ordination(ps_all_adj_r2, met_ord1, color = "Groups", shape = "Experimemts")
# Add ellipses and points to the plot
y1 = graph_met.76 +
stat_ellipse(aes(group = Groups), type = "t", level = 0.95, linetype = 2)  +
geom_point(size = 5, alpha = 0.7)  # Adds points with specified size and transparency
# Print the plot
print(y1)
######
###########################################
alpha_means <- "shannon"
b<- plot_richness(ps_all_adj_r2, x = "Groups", measures = alpha_means, color = "Groups") +
geom_boxplot(width = 0.5, alpha = 0.5) +  # Adjust width and add transparency to the boxplot
geom_point(position = position_jitterdodge(), alpha = 0.5) +  # Add jittering to the points for better visibility
stat_compare_means() +
xlab("") +
ylab("Shannon Diversity") +  # Adding label for Shannon diversity on the y-axis
theme(axis.text.x = element_blank(),  # Remove y-axis label
strip.text = element_blank(),  # Remove facet labels
strip.background = element_blank())  # Remove facet background
b
################
############Firmicutes/Bacteroidetes ratio
ps_R2 <- phyloseq::tax_glom(ps_all_adj_r2, "Phylum")
####Melt phyloseq object a dataframe
test2 = psmelt(ps_R2)
dim(test2)
#Subset dataframe
names(test2[,c(4,3,5,9)])
test3 = test2[,c(4,3,5,9)]
unique(test3$Phylum)
####Melt phyloseq object a dataframe
test2 = psmelt(ps_R2)
View(test2)
#Subset dataframe
names(test2[,c(4,3,5,9)])
test3 = test2[,c(4,3,5,9)]
unique(test3$Phylum)
View(test2)
#Subset dataframe
names(test2[,c(4,3,5,9)])
#Subset dataframe
names(test2[,c(4,3,5,10)])
test3 = test2[,c(4,3,5,10)]
unique(test3$Phylum)
# Assuming test3 is your dataframe and it has been correctly loaded and prepared
test4 <- test3 %>%
filter(Phylum == "Firmicutes" | Phylum == "Bacteroidota")
View(test4)
#Change dataframe from Long to Wide
library(tidyverse)
test5 <- test4 %>%
pivot_wider(names_from = Phylum,
values_from = Abundance)
View(test5)
#Calculate abundance ratio
test5$F.B.ratio = test5$Firmicutes/test5$Bacteroidota
View(test5)
### Check if the data is normally distributed
shapiro.test(test5$F.B.ratio)
##### Transform data to meet normal distribution
data2<- test5 %>%
mutate(F.B_new = log10(F.B.ratio))
shapiro.test(data2$F.B_new)
#############################
################ Boxplot showing the Firmicutes/Bacteroidetes ratio
f.b_all = ggplot(data = data2, aes(x = Groups, y = F.B.ratio, colour = Groups )) +
geom_boxplot(outlier.colour  = "NA") +
labs(x = "", y = "Firmicutes/Bacteroidetes ratio")  + geom_jitter(aes(color = Groups), height = 0, width = .2)  + theme(axis.text.x = element_blank()) +  stat_compare_means()
f.b_all
View(data2)
#############################
################ Boxplot showing the Firmicutes/Bacteroidetes ratio
f.b_all = ggplot(data = data2, aes(x = Groups, y = F.B_new, colour = Groups )) +
geom_boxplot(outlier.colour  = "NA") +
labs(x = "", y = "Firmicutes/Bacteroidetes ratio")  + geom_jitter(aes(color = Groups), height = 0, width = .2)  + theme(axis.text.x = element_blank()) +  stat_compare_means()
f.b_all
######
###########################################
alpha_means <- "shannon"
b<- plot_richness(ps_all_adj_r2, x = "Groups", measures = alpha_means, color = "Groups") +
geom_boxplot(width = 0.5, alpha = 0.5) +  # Adjust width and add transparency to the boxplot
geom_point(position = position_jitterdodge(), alpha = 0.5) +  # Add jittering to the points for better visibility
stat_compare_means() +
xlab("") +
ylab("Shannon Diversity") +  # Adding label for Shannon diversity on the y-axis
theme(axis.text.x = element_blank(),  # Remove y-axis label
strip.text = element_blank(),  # Remove facet labels
strip.background = element_blank())  # Remove facet background
b
#############################
################ Boxplot showing the Firmicutes/Bacteroidetes ratio
f.b_all = ggplot(data = data2, aes(x = Groups, y = F.B_new, colour = Groups )) +
geom_boxplot(outlier.colour  = "NA") +
labs(x = "", y = "Firmicutes/Bacteroidetes ratio")  + geom_jitter(aes(color = Groups), height = 0, width = .2)  + theme(axis.text.x = element_blank()) +  stat_compare_means()
f.b_all
###################################
cim(ab.mint.splsda,
row.sideColors = cbind(color.mixo(as.numeric(Y.train)),
color.mixo(as.numeric(study.train)+4)),
legend = list(legend = cbind(c(levels(Y.train)), c(levels(study.train))),
col = cbind(c(color.mixo(1:2)), c(color.mixo(5:6))),
title = "Treatment and Study", cex = 0.8)
)
################################
plotVar(ab.mint.splsda, var.names = FALSE,
pch = 16, cutoff = 0.5)
################################
plotVar(ab.mint.splsda, var.names = FALSE,
pch = 16, cutoff = 0.5)
########################
network(ab.mint.splsda, cutoff = 0.7, comp = 1,
color.node = c(color.mixo(1), color.mixo(2)),
shape.node = c("circle", "rectangle"),
lty.edge = c("dotted", "solid"),
cex.node.name = 0.7,
alpha.node = 0.5,
row.names = names)
########################
network(ab.mint.splsda, cutoff = 0.7, comp = 1,
color.node = c(color.mixo(1), color.mixo(2)),
shape.node = c("circle", "rectangle"),
lty.edge = c("dotted", "solid"),
cex.node.name = 0.7,
alpha.node = 0.5,
row.names = names)
################################
plotLoadings(ab.mint.splsda, method = "median", comp = 1,
legend = T, study = "global", contrib = "max",
title = "(a) All Studies, Comp 1")
plotLoadings(ab.mint.splsda, method = "median", comp = 2,
legend = T, study = "global", contrib = "max",
title = "(b) All Studies, Comp 2")
################################
plotVar(ab.mint.splsda, var.names = FALSE,
pch = 16, cutoff = 0.5)
###################################
cim(ab.mint.splsda,
row.sideColors = cbind(color.mixo(as.numeric(Y.train)),
color.mixo(as.numeric(study.train)+4)),
legend = list(legend = cbind(c(levels(Y.train)), c(levels(study.train))),
col = cbind(c(color.mixo(1:2)), c(color.mixo(5:6))),
title = "Treatment and Study", cex = 0.8)
)
########################
network(ab.mint.splsda, cutoff = 0.7, comp = 1,
color.node = c(color.mixo(1), color.mixo(2)),
shape.node = c("circle", "rectangle"),
lty.edge = c("dotted", "solid"),
cex.node.name = 0.7,
alpha.node = 0.5,
row.names = names)
########################
network(ab.mint.splsda, cutoff = 0.7, comp = 1,
color.node = c(color.mixo(1), color.mixo(2)),
shape.node = c("circle", "rectangle"),
lty.edge = c("dotted", "solid"),
cex.node.name = 0.7,
alpha.node = 0.5,
row.names = names)
View(tax_table(psnew))
ps_R2n <- phyloseq::tax_glom(ps_new, "Genus")
ps_R2n <- phyloseq::tax_glom(ps_new, "Genus")
View(tax_table(psnew))
ps_R2n <- phyloseq::tax_glom(psnew, "Genus")
ps_all_r_clr = microbiome::transform(ps_R2n, 'clr')
ps_d2 = subset_taxa(ps_all_r_clr, Genus == "Erysipelatoclostridium")
ps_d2 <- phyloseq::psmelt(ps_d2) %>%
ggplot(data = ., aes(x = Groups, y = Abundance, colour = Groups)) +
geom_boxplot(outlier.colour = NA, alpha = 0.5) +  # Adjust boxplot transparency
facet_wrap(~ Genus) +
labs(x = "", y = "CLR Abundance") +
geom_jitter(aes(color = Groups), height = 0, width = 0.2, alpha = 0.5) +  # Adjust point transparency
theme(axis.text.x = element_blank(),
axis.title.y = element_blank(),  # Remove y-axis label
strip.text = element_text(size = 20, face = "italic")) +  # Italicize facet labels only
stat_compare_means()
ps_d2
ps_d2 = subset_taxa(ps_all_r_clr, Genus == "Erysipelatoclostridium")
ps_d2 <- phyloseq::psmelt(ps_d2) %>%
ggplot(data = ., aes(x = Groups, y = Abundance, colour = Groups)) +
geom_boxplot(outlier.colour = NA, alpha = 0.5) +  # Adjust boxplot transparency
facet_wrap(~ Genus) +
labs(x = "", y = "CLR Abundance") +
geom_jitter(aes(color = Groups), height = 0, width = 0.2, alpha = 0.5) +  # Adjust point transparency
theme(axis.text.x = element_blank(),
axis.title.y = element_blank(),  # Remove y-axis label
strip.text = element_text(size = 20, face = "italic")) +  # Italicize facet labels only
stat_compare_means()
ps_d2
###############
theme_set(theme_bw())
pal = "Set1"
scale_colour_discrete <- function(palname = pal, ...) {
scale_colour_brewer(palette = palname, ...)
}
scale_fill_discrete <- function(palname = pal, ...) {
scale_fill_brewer(palette = palname, ...)
}
library(ggpubr)
ps_all_r_clr = microbiome::transform(ps_R2n, 'clr')
ps_d2 = subset_taxa(ps_all_r_clr, Genus == "Erysipelatoclostridium")
ps_d2 <- phyloseq::psmelt(ps_d2) %>%
ggplot(data = ., aes(x = Groups, y = Abundance, colour = Groups)) +
geom_boxplot(outlier.colour = NA, alpha = 0.5) +  # Adjust boxplot transparency
facet_wrap(~ Genus) +
labs(x = "", y = "CLR Abundance") +
geom_jitter(aes(color = Groups), height = 0, width = 0.2, alpha = 0.5) +  # Adjust point transparency
theme(axis.text.x = element_blank(),
axis.title.y = element_blank(),  # Remove y-axis label
strip.text = element_text(size = 20, face = "italic")) +  # Italicize facet labels only
stat_compare_means()
ps_d2
psnew
ps_R2n <- phyloseq::tax_glom(psnew, "Genus")
ps_R2n <- phyloseq::tax_glom(psnew, "Genus")
ps_all_r_clr = microbiome::transform(ps_R2n, 'clr')
ps_d2 = subset_taxa(ps_all_r_clr, Genus == "Erysipelatoclostridium")
ps_d2 <- phyloseq::psmelt(ps_d2) %>%
ggplot(data = ., aes(x = Groups, y = Abundance, colour = Groups)) +
geom_boxplot(outlier.colour = NA, alpha = 0.5) +  # Adjust boxplot transparency
facet_wrap(~ Genus) +
labs(x = "", y = "CLR Abundance") +
geom_jitter(aes(color = Groups), height = 0, width = 0.2, alpha = 0.5) +  # Adjust point transparency
theme(axis.text.x = element_blank(),
axis.title.y = element_blank(),  # Remove y-axis label
strip.text = element_text(size = 20, face = "italic")) +  # Italicize facet labels only
stat_compare_means()
ps_d2
library(ggpubr)
library(ggplot2)
ps_d2 = subset_taxa(ps_all_r_clr, Genus == "Erysipelatoclostridium")
ps_d2 <- phyloseq::psmelt(ps_d2) %>%
ggplot(data = ., aes(x = Groups, y = Abundance, colour = Groups)) +
geom_boxplot(outlier.colour = NA, alpha = 0.5) +  # Adjust boxplot transparency
facet_wrap(~ Genus) +
labs(x = "", y = "CLR Abundance") +
geom_jitter(aes(color = Groups), height = 0, width = 0.2, alpha = 0.5) +  # Adjust point transparency
theme(axis.text.x = element_blank(),
axis.title.y = element_blank(),  # Remove y-axis label
strip.text = element_text(size = 20, face = "italic")) +  # Italicize facet labels only
stat_compare_means()
ps_d2
psnew
ps_d2 = subset_taxa(ps_all_r_clr, Genus == "Erysipelatoclostridium")
ps_d2 <- phyloseq::psmelt(ps_d2) %>%
ggplot(data = ., aes(x = Groups, y = Abundance, colour = Groups)) +
geom_boxplot(outlier.colour = NA, alpha = 0.5) +  # Adjust boxplot transparency
facet_wrap(~ Genus) +
labs(x = "", y = "CLR Abundance") +
#geom_jitter(aes(color = Groups), height = 0, width = 0.2, alpha = 0.5) +  # Adjust point transparency
theme(axis.text.x = element_blank(),
axis.title.y = element_blank(),  # Remove y-axis label
strip.text = element_text(size = 20, face = "italic")) +  # Italicize facet labels only
stat_compare_means()
ps_d2
ps_d2
###############
theme_set(theme_bw())
pal = "Set1"
scale_colour_discrete <- function(palname = pal, ...) {
scale_colour_brewer(palette = palname, ...)
}
scale_fill_discrete <- function(palname = pal, ...) {
ps_d2 = subset_taxa(ps_all_r_clr, Genus == "Erysipelatoclostridium")
ps_d2 <- phyloseq::psmelt(ps_d2) %>%
ggplot(data = ., aes(x = Groups, y = Abundance, colour = Groups)) +
geom_boxplot(outlier.colour = NA, alpha = 0.5) +  # Adjust boxplot transparency
facet_wrap(~ Genus) +
labs(x = "", y = "CLR Abundance") +
geom_jitter(aes(color = Groups), height = 0, width = 0.2, alpha = 0.5) +  # Adjust point transparency
theme(axis.text.x = element_blank(),
axis.title.y = element_blank(),  # Remove y-axis label
strip.text = element_text(size = 20, face = "italic")) +  # Italicize facet labels only
stat_compare_means()
ps_d2
ps_d2
save.image("~/Desktop/cv/data.RData")
source("~/Desktop/cv/conqur.R")
usethis::create_package("MicrobioDiversity")
usethis::use_description()
library(Microbialdiversity)
###
# Example 1: Test with species counts
abundances <- c(10, 20, 30, 40)
# Calculate Shannon diversity
inversesimpson_index <- calculate_inverse_simpson(abundances)
# Print the result
cat("Simpson Diversity Index for abundances:", inversesimpson_index, "\n")
?microbiome_data
################
# Create dummy microbiome dataset with integrated structure
set.seed(42)
clear
devtools::install_github("Microbialdiversity1.0")
devtools::install_github("suyibaba/Microbialdiversity1.0")
library(Microbialdiversity1.0)
# Example data for two groups
group1 <- c(10, 20, 30, 40)  # Species counts in first group
group2 <- c(15, 15, 35, 35)  # Species counts in second group
# Calculate Shannon diversity for each group
shannon1 <- diversity(group1, index = "shannon")
# Calculate Shannon diversity for each group
shannon1 <- calculate_shannon(group1, index = "shannon")
# Calculate Shannon diversity for each group
shannon1 <- calculate_shannon(group1)
shannon1
# Calculate Shannon diversity for each group
shannon1 <- calculate_shannon(group2)
shannon1
print(shannon2)
library(Microbialdiversity)
p
# Example data for two groups
group1 <- c(10, 20, 30, 40)  # Species counts in first group
group2 <- c(15, 15, 35, 35)  # Species counts in second group
# Calculate Shannon diversity for each group
shannon1 <- calculate_shannon(group2)
shannon1
shannon2 <- diversity(group2, index = "shannon")
library(Microbialdiversity1.0)
# Create example data for control and treatment groups
control <- matrix(c(
10, 15, 12, 8,    # Sample 1
8, 12, 15, 10,    # Sample 2
12, 10, 8, 15     # Sample 3
), ncol = 3, byrow = FALSE)
treatment <- matrix(c(
5, 20, 15, 5,     # Sample 1
20, 5, 5, 15,     # Sample 2
15, 5, 20, 5      # Sample 3
), ncol = 3, byrow = FALSE)
View(control)
# Calculate and compare Shannon diversity
shannon_result <- compare_shannon_two(control[,1], treatment[,1])
print("Shannon Diversity Comparison:")
print(shannon_result)
devtools::install_github("suyibaba/Microbialdiversity1.0")
library(Microbialdiversity1.0)
# Create example data for control and treatment groups
control <- matrix(c(
10, 15, 12, 8,    # Sample 1
8, 12, 15, 10,    # Sample 2
12, 10, 8, 15     # Sample 3
), ncol = 3, byrow = FALSE)
treatment <- matrix(c(
5, 20, 15, 5,     # Sample 1
20, 5, 5, 15,     # Sample 2
15, 5, 20, 5      # Sample 3
), ncol = 3, byrow = FALSE)
# Calculate and compare Shannon diversity
shannon_result <- compare_shannon_two(control[,1], treatment[,1])
print(shannon_result)
print(shannon_result)
devtools::check()
setwd("~/Desktop/Microbialdiversity1.0/R")
library(Microbialdiversity1.0)
devtools::check()
unlink("LICENSE.md")
setwd("~/Desktop/Microbialdiversity1.0")
unlink("LICENSE.md")
usethis::use_build_ignore("Microbialdiversity.Rproj")
devtools::check()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
detach("package:Microbialdiversity", unload = TRUE)
detach("package:methods", unload = TRUE)
###############3
library(Microbialdiversity1.0)
devtools::install_github("suyibaba/Microbialdiversity")
devtools::install_github("suyibaba/Microbialdiversity1.0")
devtools::install_github("suyibaba/Microbialdiversity1.0")
devtools::install_github("suyibaba/Microbialdiversity1.0")
library(Microbialdiversity1.0)
devtools::install_github("suyibaba/Microbialdiversity1.0")
save.image("~/Desktop/samdata.RData")
